1.业务逻辑
	1.1.订单
		打开小程序之后--->Index--->根据自己的需求选择类型(外卖，拼团(暂时不考虑)，点餐)--->商家列表(外卖)(另外一个controller:查询所有的和外卖有关商家)
                                      --->点击某一个商家查看商品信息(商家的详情)--->可以直接添加购物车/可以点击商品查询商品详情(添加购物车)
		添加购物车开始(直接减少库存)
		--->生成订单(选择配送地址(个人中心)，配送时间，优惠券(个人中心))--->支付(队列消息)
		如果有问题可以退款
			第一种情况没有发货退款
			第二种在配送途中退款
			第三种接收到商品之后退款(不需要考虑物流)

	1.2.个人中心
		修改信息
		优惠券
		配送地址
		积分(根据会员等级(暂时不考虑)不同积分获得的多少不同，商家不同，积分的模式也不同--->把这些积分汇总)
		积分商城(暂时不考虑)
		反馈(暂时不考虑)
		系统消息(暂时不考虑)
		商品评价(只能针对商品评价，不能针对商家评价)--->商家回复
		收藏(只支持收藏商品，不支持收藏商家)
		资金明细(需要调用订单的每一笔订单的金额)
		积分记录(加减法)
		我的订单(展示出订单的状态(只需要做查询，并且根据状态的不同展示的按钮不同))
			接收到订单了-->没有确认订单
			退款了-->没有处理
			超时处理(添加完购物车之后--->点击下单--->没有支付--->30分钟之后会自动关闭(订单))



	1.3.商品信息
		霸王餐(商家根据自己的活动安排免费)
		主页
		商品推荐
		搜索(暂时不考虑ES，使用模糊查询(暂时只能搜索商品))
		广告位(做死数据)
		无论是商品还是商品类目都必须要从redis中查
		商品的图片必须要从ftp中获取
		商品类目:
			两级商品类目:
				酒水
					可乐
						百事和可口
				零食
					方便面
						....
				面食
					馒头
						花卷
					面条
						....
		商家的详情
		商品的详情
		商品的列表

!!!!!所有的请求全部都是无状态的!!!!!
也就是说所有的controller上必须要接收一个字段(token)

所有的方法必须要有注释
提交代码必须要有注释

团队共享github:
	由组长进行提交架构(github上)(提交的时候只能提交src和pom.xml，其他的一切都不要提交)--->点击settings--->选择Collaborators--->把所有的组员的名称添加进来--->搜索组员所有人命名空间--->Add Collaborators--->等待组员点击验证通过(只有验证通过才可以进行团队开发)-->这个项目可以由其他人一起编写和完善

如何使用IDEA提交github:
	1.选择View菜单--->Appearance--->Tool bar
	2.选择VCS菜单--->Import Version Control--->Create Git Repository--->选择项目所存放的本地文件夹--->项目变红(没有提交)--->对着tool bar的空白处右键--->Custom Menus And ToolBars--->Main Toolbar--->MainToolBarSettings--->选择VCS Action--->选择commit--->选择+号--->Add Action--->选择Main Menu--->VCS--->Git--->找到Push按钮--->点击Ok即可
	3.选择整个父级项目--->点击commit(忘记在github上创建项目仓库了)
		在github上创建项目仓库(仓库的名称就是父级工程的名称)
		--->直接提交(只能提交src和pom.xml)--->记得一定要写commit message(注释)--->点击commit(不要review直接commit)
	4.把整个项目push到github
		Define Remote--->选择在创建github仓库的https地址(如果是第一次操作则需要输入github账号和密码)

架构搭建:
	什么是前台？
		供用户使用(客户端使用)的项目就称之为前台项目(查询)
	什么是后台？
		公司内部使用(很多的增删改查)

	前台使用springcloud架构
		因为需要和微信小程序进行对接，所以写的都是接口
		eureka
		provider
		feign
		config
		zuul
		sso
		redis
		ES
		mycat
		ftp
		swagger2

	架构需要用到哪些项目？(入门:解耦)
		repast-app-parent:父级工程(掌握整个项目所需要的jar包)
			-- common:jar包(通用,各种工具类)
				不要局限于该项目，common项目的意义是适用于所有的项目并不是局限于该项目
				不要产生任何依赖

			-- config:jar包(包含所有组件的配置(redis,ftp,es...全部放在该工程下))
				需要依赖于common项目

			-- eureka:jar包(而且绝对没有任何的依赖:注册中心)
				没有任何依赖

			-- zuul:jar包(整个项目的入口(1.分发请求,2.过滤请求))
				没有任何依赖

			-- consumer:消费者(在真实项目中可能没有,和客户端进行交互)
				依赖于api
				List<Book> selectAll();
				依赖于common(工具类)

			-- provider:生产者(和数据库进行交互)
				依赖于service
				和数据打交道--->必须要依赖config-->config又依赖了common

			-- management:整个项目的核心管理
				-- model
				-- mapper
					依赖于model
				-- service
					依赖于mapper
				-- api(Hystrix,Feign)
					List<Book> selectAll();
					依赖于model

	后台使用springboot架构
		shiro
